pragma solidity ^0.8.0;


import "@openzeppelin/contracts/token/ERC721/ERC721.sol";


contract PablockToken is  ERC721 {
    
    uint256 public tokenCounter;
    address public contractOwner;
    
    mapping( address => uint256) public _owners;
    
    constructor () public ERC721("PablockToken", "PTK") {
        tokenCounter = 0;
        
        contractOwner = msg.sender;
        // _registerInterface(IERC721Receiver.onERC721Received.selector);

    }
    
    function createToken(address _to) public returns (uint256){
        
        uint256 newItemId = tokenCounter;

        _safeMint(_to, newItemId);
        
        tokenCounter = tokenCounter + 1;

        _owners[_to] += 1;
        
        return (newItemId);
    }
    
    
    
    function transferToken(address _from, address _to, uint256 _tokenId, bytes32 _hash) public {

        require(address(_from) == ownerOf(_tokenId), "Not allowed");
        
        (bool success, bytes memory data) = address(this).call(abi.encodeWithSignature("safeTransferFrom(address,address,uint256)", _from, _to, _tokenId));
        // safeTransferFrom(_from, _to, _tokenId, _hash);
        

        require(success, "Internal call failed");
    }

    // function test() public {
    //     require(false, "ERRORE");
    // }
    
    // function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;
    
}